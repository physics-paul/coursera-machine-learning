"""*********************************************************

NAME:     ex7

AUTHOR:   Paul Haddon Sanders IV, Ph.D

VERSION:  2. Principal Component Analysis

*********************************************************"""

import numpy as np
from scipy import io
from PIL import Image as im
import matplotlib.pyplot as plt
from pdb import set_trace as pb

### Get data ###############################################

mat1  = io.loadmat('ex7data1.mat')

X     = mat1['X']
X_std = (X - X.mean(0)) / X.std(0)

### 2.2 Implementing PCA ###################################

covariance1 = X_std.T.dot(X_std) / X_std.shape[0]
eigvalues1,eigvectors1 = np.linalg.eig(covariance1)

### 2.3.1 Projecting the data onto the principal components
k=1
k_vectors = eigvalues1.argsort()[::-1][:k]

Xbasis    = np.linalg.inv(eigvectors1).dot(X_std.T).T
Xproje    = Xbasis[:,k_vectors]
eigreduce1 = eigvectors1[:,k_vectors]

### 2.3.2 Reconstructing and approximation of the data #####

X_reco    = eigreduce1.dot(Xproje.T).T
X_o       = X_reco * X.std(0) + X.mean(0)

### 2.4 Fact Image Dataset #################################

mat2  = io.loadmat('ex7faces.mat')

A = mat2['X'] + 256.0/2.0
A_std = (A - A.mean(0)) / A.std(0)

### 2.4.1 PCA on Faces #####################################

covariance2 = A_std.T.dot(A_std) / A_std.shape[0]
eigvalues2,eigvectors2 = np.linalg.eig(covariance2)
eigvectors2_o = eigvectors2 * A.std(0) + A.mean(0)

### 2.4.2 Dimensionality Reduction #########################

k=100
k_vectors  = eigvalues2.argsort()[::-1][:k]

Abasis       = np.linalg.inv(eigvectors2).dot(A_std.T).T
Aproje       = Abasis[:,k_vectors]
eigreduce2   = eigvectors2[:,k_vectors]
eigreduce2_o = eigvectors2_o[:,k_vectors].T

A_reco       = eigreduce2.dot(Aproje.T).T
A_o          = A_reco * A.std(0) + A.mean(0)

### output #################################################

print('   ex7 : 2.2 Implementing PCA')
print('   First eigenvector : {}'.format(str(eigvectors1[1])))

fig1 = plt.figure()

X_plt  = np.array([[a * eig for a in np.linspace(-2,0,100)] for eig in eigvectors1])
Xo_plt = np.array([xval * X.std(0) + X.mean(0) for xval in X_plt])

plt.scatter(X[:,0],X[:,1])
plt.plot(Xo_plt[0,:,0],Xo_plt[0,:,1])
plt.plot(Xo_plt[1,:,0],Xo_plt[1,:,1])

fig2 = plt.figure()

plt.scatter(X[:,0],X[:,1])
plt.scatter(X_o[:,0],X_o[:,1])
plt.show()

all_im = im.new('L', (32*20,32*10))

images1 = np.reshape(A[:100],(10,10,1024))
images2 = np.reshape(A_o[:100],(10,10,1024))

for i,row in enumerate(images1):
    for j,ima in enumerate(row):

        ima = np.reshape(ima,(32,32)).T
        ima = im.fromarray(ima)

        all_im.paste(ima,(i*32,j*32))

for i,row in enumerate(images2):
    for j,ima in enumerate(row):

        ima = np.reshape(ima,(32,32)).T
        ima = im.fromarray(ima)

        all_im.paste(ima,((i+10)*32,j*32))
        
all_im.show()

all_im  = im.new('L', (32*6,32*6))
images3 = np.reshape(eigreduce2_o[:36],(6,6,1024))

for i,row in enumerate(images3):
    for j,ima in enumerate(row):

        ima = np.reshape(ima,(32,32)).T
        ima = im.fromarray(ima)

        all_im.paste(ima,(i*32,j*32))

all_im.show()
